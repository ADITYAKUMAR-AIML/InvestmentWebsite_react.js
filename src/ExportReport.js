import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './ExportReport.css';

const ExportReport = () => {
  const navigate = useNavigate();
  const [reportType, setReportType] = useState('portfolio');
  const [format, setFormat] = useState('pdf');
  const [dateRange, setDateRange] = useState('all');
  const [includeCharts, setIncludeCharts] = useState(true);
  const [portfolioData, setPortfolioData] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);

  // Mock portfolio data
  const mockPortfolioData = {
    summary: {
      totalValue: 12500.75,
      totalInvested: 11000.00,
      totalGain: 1500.75,
      gainPercentage: 13.64,
      dailyChange: 245.50,
      dailyChangePercent: 2.0
    },
    holdings: [
      { symbol: 'AAPL', name: 'Apple Inc.', shares: 10, avgPrice: 170.50, currentPrice: 182.63, value: 1826.30, gain: 121.30, gainPercent: 7.11 },
      { symbol: 'MSFT', name: 'Microsoft', shares: 5, avgPrice: 400.25, currentPrice: 415.50, value: 2077.50, gain: 76.25, gainPercent: 3.81 },
      { symbol: 'TSLA', name: 'Tesla Inc.', shares: 8, avgPrice: 220.00, currentPrice: 245.18, value: 1961.44, gain: 201.44, gainPercent: 11.45 },
      { symbol: 'AMZN', name: 'Amazon.com', shares: 12, avgPrice: 165.80, currentPrice: 178.22, value: 2138.64, gain: 149.04, gainPercent: 7.50 }
    ],
    transactions: [
      { date: '2024-01-15', symbol: 'AAPL', type: 'buy', shares: 10, price: 170.50, total: 1705.00 },
      { date: '2024-01-20', symbol: 'MSFT', type: 'buy', shares: 5, price: 400.25, total: 2001.25 },
      { date: '2024-02-01', symbol: 'TSLA', type: 'buy', shares: 8, price: 220.00, total: 1760.00 },
      { date: '2024-02-10', symbol: 'AMZN', type: 'buy', shares: 12, price: 165.80, total: 1989.60 }
    ],
    performance: {
      daily: 2.0,
      weekly: 3.2,
      monthly: 5.7,
      yearly: 25.8
    }
  };

  useEffect(() => {
    // Simulate loading portfolio data
    setPortfolioData(mockPortfolioData);
  }, []);

  const generateReport = async () => {
    setIsGenerating(true);
    
    // Simulate report generation
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Generate the report based on selected options
    const reportContent = generateReportContent();
    
    // Download the report
    downloadReport(reportContent);
    
    setIsGenerating(false);
  };

  const generateReportContent = () => {
    const timestamp = new Date().toLocaleString();
    let content = '';

    switch (reportType) {
      case 'portfolio':
        content = generatePortfolioReport();
        break;
      case 'holdings':
        content = generateHoldingsReport();
        break;
      case 'transactions':
        content = generateTransactionsReport();
        break;
      case 'performance':
        content = generatePerformanceReport();
        break;
      default:
        content = generatePortfolioReport();
    }

    return `
InvestVision Portfolio Report
Generated: ${timestamp}
Report Type: ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}
Format: ${format.toUpperCase()}

${content}

---
This report was generated by InvestVision.
For support, contact: support@investvision.com
    `.trim();
  };

  const generatePortfolioReport = () => {
    return `
PORTFOLIO SUMMARY
=================

Total Portfolio Value: $${portfolioData.summary.totalValue.toFixed(2)}
Total Invested: $${portfolioData.summary.totalInvested.toFixed(2)}
Total Gain/Loss: $${portfolioData.summary.totalGain.toFixed(2)} (${portfolioData.summary.gainPercentage.toFixed(2)}%)
Today's Change: $${portfolioData.summary.dailyChange.toFixed(2)} (${portfolioData.summary.dailyChangePercent.toFixed(2)}%)

HOLDINGS BREAKDOWN
==================

${portfolioData.holdings.map(holding => `
${holding.symbol} - ${holding.name}
  Shares: ${holding.shares}
  Avg Price: $${holding.avgPrice.toFixed(2)}
  Current Price: $${holding.currentPrice.toFixed(2)}
  Value: $${holding.value.toFixed(2)}
  Gain/Loss: $${holding.gain.toFixed(2)} (${holding.gainPercent.toFixed(2)}%)
`).join('')}

Total Holdings Value: $${portfolioData.holdings.reduce((sum, h) => sum + h.value, 0).toFixed(2)}
    `;
  };

  const generateHoldingsReport = () => {
    return `
DETAILED HOLDINGS REPORT
========================

${portfolioData.holdings.map(holding => `
STOCK: ${holding.symbol} - ${holding.name}
‚îú‚îÄ‚îÄ Shares Held: ${holding.shares}
‚îú‚îÄ‚îÄ Average Cost: $${holding.avgPrice.toFixed(2)}
‚îú‚îÄ‚îÄ Current Price: $${holding.currentPrice.toFixed(2)}
‚îú‚îÄ‚îÄ Total Value: $${holding.value.toFixed(2)}
‚îú‚îÄ‚îÄ Total Cost: $${(holding.avgPrice * holding.shares).toFixed(2)}
‚îî‚îÄ‚îÄ Unrealized P&L: $${holding.gain.toFixed(2)} (${holding.gainPercent.toFixed(2)}%)

`).join('')}

PORTFOLIO ALLOCATION
====================

${portfolioData.holdings.map(holding => {
  const totalValue = portfolioData.holdings.reduce((sum, h) => sum + h.value, 0);
  const allocation = (holding.value / totalValue * 100).toFixed(1);
  return `${holding.symbol}: ${allocation}%`;
}).join('\n')}
    `;
  };

  const generateTransactionsReport = () => {
    return `
TRANSACTION HISTORY
===================

${portfolioData.transactions.map(tx => `
DATE: ${tx.date}
SYMBOL: ${tx.symbol}
ACTION: ${tx.type.toUpperCase()}
SHARES: ${tx.shares}
PRICE: $${tx.price.toFixed(2)}
TOTAL: $${tx.total.toFixed(2)}
${'-'.repeat(40)}
`).join('')}

SUMMARY:
Total Transactions: ${portfolioData.transactions.length}
Total Investment: $${portfolioData.transactions.reduce((sum, tx) => sum + tx.total, 0).toFixed(2)}
    `;
  };

  const generatePerformanceReport = () => {
    return `
PORTFOLIO PERFORMANCE REPORT
============================

PERFORMANCE METRICS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Daily Return: ${portfolioData.performance.daily.toFixed(2)}%
Weekly Return: ${portfolioData.performance.weekly.toFixed(2)}%
Monthly Return: ${portfolioData.performance.monthly.toFixed(2)}%
Yearly Return: ${portfolioData.performance.yearly.toFixed(2)}%

Total Return: ${portfolioData.summary.gainPercentage.toFixed(2)}%
Total Gain: $${portfolioData.summary.totalGain.toFixed(2)}

RISK METRICS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Best Performer: ${getBestPerformer()}
Worst Performer: ${getWorstPerformer()}
Portfolio Beta: 1.2 (Estimated)
Volatility: Medium

ASSET ALLOCATION
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${portfolioData.holdings.map(holding => {
  const totalValue = portfolioData.holdings.reduce((sum, h) => sum + h.value, 0);
  const allocation = (holding.value / totalValue * 100).toFixed(1);
  return `${holding.symbol}: ${allocation}% ($${holding.value.toFixed(2)})`;
}).join('\n')}
    `;
  };

  const getBestPerformer = () => {
    const best = portfolioData.holdings.reduce((best, current) => 
      current.gainPercent > best.gainPercent ? current : best
    );
    return `${best.symbol} (${best.gainPercent.toFixed(2)}%)`;
  };

  const getWorstPerformer = () => {
    const worst = portfolioData.holdings.reduce((worst, current) => 
      current.gainPercent < worst.gainPercent ? current : worst
    );
    return `${worst.symbol} (${worst.gainPercent.toFixed(2)}%)`;
  };

  const downloadReport = (content) => {
    const blob = new Blob([content], { type: getMimeType(format) });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `investvision-report-${reportType}-${new Date().toISOString().split('T')[0]}.${format}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getMimeType = (format) => {
    switch (format) {
      case 'pdf': return 'application/pdf';
      case 'csv': return 'text/csv';
      case 'xlsx': return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      case 'json': return 'application/json';
      default: return 'text/plain';
    }
  };

  const exportToJSON = () => {
    const data = {
      generated: new Date().toISOString(),
      reportType,
      portfolio: portfolioData
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `investvision-data-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const printReport = () => {
    window.print();
  };

  if (!portfolioData) {
    return <div className="export-report loading">Loading...</div>;
  }

  return (
    <div className="export-report">
      {/* Header */}
      <header className="export-header">
        <button className="back-button" onClick={() => navigate('/dashboard')}>
          ‚Üê Back to Dashboard
        </button>
        <h1>Export Portfolio Report</h1>
        <p>Generate and download detailed reports of your investment portfolio</p>
      </header>

      <div className="export-container">
        {/* Configuration Panel */}
        <div className="config-panel">
          <div className="config-section">
            <h3>Report Type</h3>
            <div className="option-grid">
              <div 
                className={`option-card ${reportType === 'portfolio' ? 'selected' : ''}`}
                onClick={() => setReportType('portfolio')}
              >
                <div className="option-icon">üìä</div>
                <div className="option-content">
                  <h4>Portfolio Summary</h4>
                  <p>Complete overview with holdings and performance</p>
                </div>
              </div>
              
              <div 
                className={`option-card ${reportType === 'holdings' ? 'selected' : ''}`}
                onClick={() => setReportType('holdings')}
              >
                <div className="option-icon">üìà</div>
                <div className="option-content">
                  <h4>Detailed Holdings</h4>
                  <p>Comprehensive breakdown of all investments</p>
                </div>
              </div>
              
              <div 
                className={`option-card ${reportType === 'transactions' ? 'selected' : ''}`}
                onClick={() => setReportType('transactions')}
              >
                <div className="option-icon">üí≥</div>
                <div className="option-content">
                  <h4>Transaction History</h4>
                  <p>Complete record of all buy/sell transactions</p>
                </div>
              </div>
              
              <div 
                className={`option-card ${reportType === 'performance' ? 'selected' : ''}`}
                onClick={() => setReportType('performance')}
              >
                <div className="option-icon">üéØ</div>
                <div className="option-content">
                  <h4>Performance Analysis</h4>
                  <p>Detailed performance metrics and analytics</p>
                </div>
              </div>
            </div>
          </div>

          <div className="config-section">
            <h3>Export Settings</h3>
            <div className="settings-grid">
              <div className="setting-group">
                <label>Format</label>
                <select 
                  value={format} 
                  onChange={(e) => setFormat(e.target.value)}
                  className="setting-select"
                >
                  <option value="pdf">PDF Document</option>
                  <option value="csv">CSV Spreadsheet</option>
                  <option value="xlsx">Excel Workbook</option>
                  <option value="json">JSON Data</option>
                  <option value="txt">Text File</option>
                </select>
              </div>

              <div className="setting-group">
                <label>Date Range</label>
                <select 
                  value={dateRange} 
                  onChange={(e) => setDateRange(e.target.value)}
                  className="setting-select"
                >
                  <option value="all">All Time</option>
                  <option value="ytd">Year to Date</option>
                  <option value="1y">Last 12 Months</option>
                  <option value="6m">Last 6 Months</option>
                  <option value="1m">Last 30 Days</option>
                </select>
              </div>

              <div className="setting-group">
                <label>Include Charts</label>
                <div className="toggle-switch">
                  <input
                    type="checkbox"
                    id="includeCharts"
                    checked={includeCharts}
                    onChange={(e) => setIncludeCharts(e.target.checked)}
                  />
                  <label htmlFor="includeCharts" className="toggle-slider"></label>
                </div>
              </div>
            </div>
          </div>

          <div className="quick-actions">
            <h3>Quick Actions</h3>
            <div className="action-buttons">
              <button 
                className="action-btn secondary"
                onClick={exportToJSON}
              >
                Export Raw Data (JSON)
              </button>
              <button 
                className="action-btn secondary"
                onClick={printReport}
              >
                Print Report
              </button>
            </div>
          </div>
        </div>

        {/* Preview Panel */}
        <div className="preview-panel">
          <div className="preview-header">
            <h3>Report Preview</h3>
            <div className="preview-actions">
              <span className="file-size">~{(reportType.length * 2.5).toFixed(1)}KB</span>
              <span className="format-badge">{format.toUpperCase()}</span>
            </div>
          </div>

          <div className="preview-content">
            <div className="report-preview">
              <div className="report-header">
                <h2>InvestVision Portfolio Report</h2>
                <p>Generated on {new Date().toLocaleDateString()}</p>
                <div className="report-meta">
                  <span>Type: {reportType.charAt(0).toUpperCase() + reportType.slice(1)}</span>
                  <span>Period: {dateRange.toUpperCase()}</span>
                </div>
              </div>

              <div className="report-body">
                {reportType === 'portfolio' && (
                  <div className="portfolio-preview">
                    <h3>Portfolio Summary</h3>
                    <div className="summary-stats">
                      <div className="stat">
                        <span className="label">Total Value</span>
                        <span className="value">${portfolioData.summary.totalValue.toFixed(2)}</span>
                      </div>
                      <div className="stat">
                        <span className="label">Total Gain</span>
                        <span className="value positive">${portfolioData.summary.totalGain.toFixed(2)}</span>
                      </div>
                      <div className="stat">
                        <span className="label">Today's Change</span>
                        <span className="value positive">${portfolioData.summary.dailyChange.toFixed(2)}</span>
                      </div>
                    </div>
                    
                    <h4>Holdings</h4>
                    <div className="holdings-preview">
                      {portfolioData.holdings.slice(0, 3).map(holding => (
                        <div key={holding.symbol} className="holding-item">
                          <span className="symbol">{holding.symbol}</span>
                          <span className="shares">{holding.shares} shares</span>
                          <span className="value">${holding.value.toFixed(2)}</span>
                        </div>
                      ))}
                      {portfolioData.holdings.length > 3 && (
                        <div className="more-items">+{portfolioData.holdings.length - 3} more holdings</div>
                      )}
                    </div>
                  </div>
                )}

                {reportType === 'holdings' && (
                  <div className="holdings-preview">
                    <h3>Detailed Holdings</h3>
                    {portfolioData.holdings.slice(0, 4).map(holding => (
                      <div key={holding.symbol} className="holding-detail">
                        <div className="stock-header">
                          <strong>{holding.symbol}</strong> - {holding.name}
                        </div>
                        <div className="holding-stats">
                          <span>Shares: {holding.shares}</span>
                          <span>Value: ${holding.value.toFixed(2)}</span>
                          <span className={holding.gain >= 0 ? 'positive' : 'negative'}>
                            P&L: ${holding.gain.toFixed(2)}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {reportType === 'transactions' && (
                  <div className="transactions-preview">
                    <h3>Recent Transactions</h3>
                    {portfolioData.transactions.slice(0, 3).map(tx => (
                      <div key={tx.date + tx.symbol} className="transaction-item">
                        <span className="date">{tx.date}</span>
                        <span className={`type ${tx.type}`}>{tx.type.toUpperCase()}</span>
                        <span className="symbol">{tx.symbol}</span>
                        <span className="shares">{tx.shares} shares</span>
                        <span className="amount">${tx.total.toFixed(2)}</span>
                      </div>
                    ))}
                  </div>
                )}

                {reportType === 'performance' && (
                  <div className="performance-preview">
                    <h3>Performance Overview</h3>
                    <div className="performance-stats">
                      <div className="perf-stat">
                        <span>YTD Return</span>
                        <span className="positive">+{portfolioData.performance.yearly.toFixed(1)}%</span>
                      </div>
                      <div className="perf-stat">
                        <span>Best Performer</span>
                        <span>{getBestPerformer()}</span>
                      </div>
                      <div className="perf-stat">
                        <span>Total Return</span>
                        <span className="positive">+{portfolioData.summary.gainPercentage.toFixed(1)}%</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="report-footer">
                <p>Confidential - For personal use only</p>
              </div>
            </div>
          </div>

          <div className="generate-section">
            <button 
              className={`generate-btn ${isGenerating ? 'generating' : ''}`}
              onClick={generateReport}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <div className="spinner"></div>
                  Generating Report...
                </>
              ) : (
                `Download ${format.toUpperCase()} Report`
              )}
            </button>
            <p className="generate-note">
              Report will include all data for the selected period in {format.toUpperCase()} format
            </p>
          </div>
        </div>
      </div>

      {/* Usage Tips */}
      <div className="usage-tips">
        <h3>Usage Tips</h3>
        <div className="tips-grid">
          <div className="tip">
            <span className="tip-icon">üìã</span>
            <p><strong>Tax Reporting:</strong> Use transaction history for tax preparation</p>
          </div>
          <div className="tip">
            <span className="tip-icon">üìà</span>
            <p><strong>Performance Review:</strong> Export monthly to track progress</p>
          </div>
          <div className="tip">
            <span className="tip-icon">ü§ù</span>
            <p><strong>Financial Advisor:</strong> Share portfolio summary with your advisor</p>
          </div>
          <div className="tip">
            <span className="tip-icon">üíº</span>
            <p><strong>Backup:</strong> Regular exports serve as data backup</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExportReport;